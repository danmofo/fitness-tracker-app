/*
 * This file is generated by jOOQ.
 */
package com.dmoffat.fitnesstracker.db.tables;


import com.dmoffat.fitnesstracker.db.Ft;
import com.dmoffat.fitnesstracker.db.Keys;
import com.dmoffat.fitnesstracker.db.tables.Exercise.ExercisePath;
import com.dmoffat.fitnesstracker.db.tables.Workout.WorkoutPath;
import com.dmoffat.fitnesstracker.db.tables.records.WorkoutExerciseRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WorkoutExercise extends TableImpl<WorkoutExerciseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ft.workout_exercise</code>
     */
    public static final WorkoutExercise WORKOUT_EXERCISE = new WorkoutExercise();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkoutExerciseRecord> getRecordType() {
        return WorkoutExerciseRecord.class;
    }

    /**
     * The column <code>ft.workout_exercise.id</code>.
     */
    public final TableField<WorkoutExerciseRecord, UInteger> ID = createField(DSL.name("id"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>ft.workout_exercise.workout_id</code>.
     */
    public final TableField<WorkoutExerciseRecord, UInteger> WORKOUT_ID = createField(DSL.name("workout_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>ft.workout_exercise.exercise_id</code>.
     */
    public final TableField<WorkoutExerciseRecord, UInteger> EXERCISE_ID = createField(DSL.name("exercise_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>ft.workout_exercise.weight</code>.
     */
    public final TableField<WorkoutExerciseRecord, UInteger> WEIGHT = createField(DSL.name("weight"), SQLDataType.INTEGERUNSIGNED.nullable(false).defaultValue(DSL.inline("1", SQLDataType.INTEGERUNSIGNED)), this, "");

    /**
     * The column <code>ft.workout_exercise.sets</code>.
     */
    public final TableField<WorkoutExerciseRecord, Integer> SETS = createField(DSL.name("sets"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("1", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>ft.workout_exercise.reps</code>.
     */
    public final TableField<WorkoutExerciseRecord, Integer> REPS = createField(DSL.name("reps"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>ft.workout_exercise.notes</code>.
     */
    public final TableField<WorkoutExerciseRecord, String> NOTES = createField(DSL.name("notes"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>ft.workout_exercise.equipment</code>.
     */
    public final TableField<WorkoutExerciseRecord, JSON> EQUIPMENT = createField(DSL.name("equipment"), SQLDataType.JSON, this, "");

    /**
     * The column <code>ft.workout_exercise.created_on</code>.
     */
    public final TableField<WorkoutExerciseRecord, LocalDateTime> CREATED_ON = createField(DSL.name("created_on"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>ft.workout_exercise.updated_on</code>.
     */
    public final TableField<WorkoutExerciseRecord, LocalDateTime> UPDATED_ON = createField(DSL.name("updated_on"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private WorkoutExercise(Name alias, Table<WorkoutExerciseRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private WorkoutExercise(Name alias, Table<WorkoutExerciseRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>ft.workout_exercise</code> table reference
     */
    public WorkoutExercise(String alias) {
        this(DSL.name(alias), WORKOUT_EXERCISE);
    }

    /**
     * Create an aliased <code>ft.workout_exercise</code> table reference
     */
    public WorkoutExercise(Name alias) {
        this(alias, WORKOUT_EXERCISE);
    }

    /**
     * Create a <code>ft.workout_exercise</code> table reference
     */
    public WorkoutExercise() {
        this(DSL.name("workout_exercise"), null);
    }

    public <O extends Record> WorkoutExercise(Table<O> path, ForeignKey<O, WorkoutExerciseRecord> childPath, InverseForeignKey<O, WorkoutExerciseRecord> parentPath) {
        super(path, childPath, parentPath, WORKOUT_EXERCISE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class WorkoutExercisePath extends WorkoutExercise implements Path<WorkoutExerciseRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> WorkoutExercisePath(Table<O> path, ForeignKey<O, WorkoutExerciseRecord> childPath, InverseForeignKey<O, WorkoutExerciseRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private WorkoutExercisePath(Name alias, Table<WorkoutExerciseRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public WorkoutExercisePath as(String alias) {
            return new WorkoutExercisePath(DSL.name(alias), this);
        }

        @Override
        public WorkoutExercisePath as(Name alias) {
            return new WorkoutExercisePath(alias, this);
        }

        @Override
        public WorkoutExercisePath as(Table<?> alias) {
            return new WorkoutExercisePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Ft.FT;
    }

    @Override
    public Identity<WorkoutExerciseRecord, UInteger> getIdentity() {
        return (Identity<WorkoutExerciseRecord, UInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<WorkoutExerciseRecord> getPrimaryKey() {
        return Keys.KEY_WORKOUT_EXERCISE_PRIMARY;
    }

    @Override
    public List<ForeignKey<WorkoutExerciseRecord, ?>> getReferences() {
        return Arrays.asList(Keys.WORKOUT_ID_FK, Keys.EXERCISE_ID_FK);
    }

    private transient WorkoutPath _workout;

    /**
     * Get the implicit join path to the <code>ft.workout</code> table.
     */
    public WorkoutPath workout() {
        if (_workout == null)
            _workout = new WorkoutPath(this, Keys.WORKOUT_ID_FK, null);

        return _workout;
    }

    private transient ExercisePath _exercise;

    /**
     * Get the implicit join path to the <code>ft.exercise</code> table.
     */
    public ExercisePath exercise() {
        if (_exercise == null)
            _exercise = new ExercisePath(this, Keys.EXERCISE_ID_FK, null);

        return _exercise;
    }

    @Override
    public WorkoutExercise as(String alias) {
        return new WorkoutExercise(DSL.name(alias), this);
    }

    @Override
    public WorkoutExercise as(Name alias) {
        return new WorkoutExercise(alias, this);
    }

    @Override
    public WorkoutExercise as(Table<?> alias) {
        return new WorkoutExercise(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkoutExercise rename(String name) {
        return new WorkoutExercise(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkoutExercise rename(Name name) {
        return new WorkoutExercise(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkoutExercise rename(Table<?> name) {
        return new WorkoutExercise(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkoutExercise where(Condition condition) {
        return new WorkoutExercise(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkoutExercise where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkoutExercise where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkoutExercise where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public WorkoutExercise where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public WorkoutExercise where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public WorkoutExercise where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public WorkoutExercise where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkoutExercise whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public WorkoutExercise whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
