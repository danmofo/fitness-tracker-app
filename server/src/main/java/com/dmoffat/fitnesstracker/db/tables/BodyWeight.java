/*
 * This file is generated by jOOQ.
 */
package com.dmoffat.fitnesstracker.db.tables;


import com.dmoffat.fitnesstracker.db.Ft;
import com.dmoffat.fitnesstracker.db.Keys;
import com.dmoffat.fitnesstracker.db.tables.User.UserPath;
import com.dmoffat.fitnesstracker.db.tables.records.BodyWeightRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class BodyWeight extends TableImpl<BodyWeightRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ft.body_weight</code>
     */
    public static final BodyWeight BODY_WEIGHT = new BodyWeight();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BodyWeightRecord> getRecordType() {
        return BodyWeightRecord.class;
    }

    /**
     * The column <code>ft.body_weight.id</code>.
     */
    public final TableField<BodyWeightRecord, UInteger> ID = createField(DSL.name("id"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>ft.body_weight.user_id</code>.
     */
    public final TableField<BodyWeightRecord, UInteger> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>ft.body_weight.weight</code>.
     */
    public final TableField<BodyWeightRecord, Double> WEIGHT = createField(DSL.name("weight"), SQLDataType.FLOAT.nullable(false), this, "");

    /**
     * The column <code>ft.body_weight.logged_on</code>.
     */
    public final TableField<BodyWeightRecord, LocalDate> LOGGED_ON = createField(DSL.name("logged_on"), SQLDataType.LOCALDATE.defaultValue(DSL.inline("curdate()", SQLDataType.LOCALDATE)), this, "");

    private BodyWeight(Name alias, Table<BodyWeightRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private BodyWeight(Name alias, Table<BodyWeightRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>ft.body_weight</code> table reference
     */
    public BodyWeight(String alias) {
        this(DSL.name(alias), BODY_WEIGHT);
    }

    /**
     * Create an aliased <code>ft.body_weight</code> table reference
     */
    public BodyWeight(Name alias) {
        this(alias, BODY_WEIGHT);
    }

    /**
     * Create a <code>ft.body_weight</code> table reference
     */
    public BodyWeight() {
        this(DSL.name("body_weight"), null);
    }

    public <O extends Record> BodyWeight(Table<O> path, ForeignKey<O, BodyWeightRecord> childPath, InverseForeignKey<O, BodyWeightRecord> parentPath) {
        super(path, childPath, parentPath, BODY_WEIGHT);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class BodyWeightPath extends BodyWeight implements Path<BodyWeightRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> BodyWeightPath(Table<O> path, ForeignKey<O, BodyWeightRecord> childPath, InverseForeignKey<O, BodyWeightRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private BodyWeightPath(Name alias, Table<BodyWeightRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public BodyWeightPath as(String alias) {
            return new BodyWeightPath(DSL.name(alias), this);
        }

        @Override
        public BodyWeightPath as(Name alias) {
            return new BodyWeightPath(alias, this);
        }

        @Override
        public BodyWeightPath as(Table<?> alias) {
            return new BodyWeightPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Ft.FT;
    }

    @Override
    public Identity<BodyWeightRecord, UInteger> getIdentity() {
        return (Identity<BodyWeightRecord, UInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<BodyWeightRecord> getPrimaryKey() {
        return Keys.KEY_BODY_WEIGHT_PRIMARY;
    }

    @Override
    public List<ForeignKey<BodyWeightRecord, ?>> getReferences() {
        return Arrays.asList(Keys.BODY_WEIGHT_USER_ID_FK);
    }

    private transient UserPath _user;

    /**
     * Get the implicit join path to the <code>ft.user</code> table.
     */
    public UserPath user() {
        if (_user == null)
            _user = new UserPath(this, Keys.BODY_WEIGHT_USER_ID_FK, null);

        return _user;
    }

    @Override
    public BodyWeight as(String alias) {
        return new BodyWeight(DSL.name(alias), this);
    }

    @Override
    public BodyWeight as(Name alias) {
        return new BodyWeight(alias, this);
    }

    @Override
    public BodyWeight as(Table<?> alias) {
        return new BodyWeight(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BodyWeight rename(String name) {
        return new BodyWeight(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BodyWeight rename(Name name) {
        return new BodyWeight(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BodyWeight rename(Table<?> name) {
        return new BodyWeight(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BodyWeight where(Condition condition) {
        return new BodyWeight(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BodyWeight where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BodyWeight where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BodyWeight where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BodyWeight where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BodyWeight where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BodyWeight where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public BodyWeight where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BodyWeight whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public BodyWeight whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
