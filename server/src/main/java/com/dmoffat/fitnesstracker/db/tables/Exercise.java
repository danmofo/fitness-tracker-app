/*
 * This file is generated by jOOQ.
 */
package com.dmoffat.fitnesstracker.db.tables;


import com.dmoffat.fitnesstracker.db.Ft;
import com.dmoffat.fitnesstracker.db.Keys;
import com.dmoffat.fitnesstracker.db.tables.WorkoutExercise.WorkoutExercisePath;
import com.dmoffat.fitnesstracker.db.tables.records.ExerciseRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Exercise extends TableImpl<ExerciseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>ft.exercise</code>
     */
    public static final Exercise EXERCISE = new Exercise();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExerciseRecord> getRecordType() {
        return ExerciseRecord.class;
    }

    /**
     * The column <code>ft.exercise.id</code>.
     */
    public final TableField<ExerciseRecord, UInteger> ID = createField(DSL.name("id"), SQLDataType.INTEGERUNSIGNED.nullable(false).identity(true), this, "");

    /**
     * The column <code>ft.exercise.name</code>.
     */
    public final TableField<ExerciseRecord, String> NAME = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>ft.exercise.brand</code>.
     */
    public final TableField<ExerciseRecord, String> BRAND = createField(DSL.name("brand"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>ft.exercise.type</code>.
     */
    public final TableField<ExerciseRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(20).nullable(false).defaultValue(DSL.inline("FREE_WEIGHT", SQLDataType.VARCHAR)), this, "");

    private Exercise(Name alias, Table<ExerciseRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Exercise(Name alias, Table<ExerciseRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>ft.exercise</code> table reference
     */
    public Exercise(String alias) {
        this(DSL.name(alias), EXERCISE);
    }

    /**
     * Create an aliased <code>ft.exercise</code> table reference
     */
    public Exercise(Name alias) {
        this(alias, EXERCISE);
    }

    /**
     * Create a <code>ft.exercise</code> table reference
     */
    public Exercise() {
        this(DSL.name("exercise"), null);
    }

    public <O extends Record> Exercise(Table<O> path, ForeignKey<O, ExerciseRecord> childPath, InverseForeignKey<O, ExerciseRecord> parentPath) {
        super(path, childPath, parentPath, EXERCISE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ExercisePath extends Exercise implements Path<ExerciseRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ExercisePath(Table<O> path, ForeignKey<O, ExerciseRecord> childPath, InverseForeignKey<O, ExerciseRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ExercisePath(Name alias, Table<ExerciseRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ExercisePath as(String alias) {
            return new ExercisePath(DSL.name(alias), this);
        }

        @Override
        public ExercisePath as(Name alias) {
            return new ExercisePath(alias, this);
        }

        @Override
        public ExercisePath as(Table<?> alias) {
            return new ExercisePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Ft.FT;
    }

    @Override
    public Identity<ExerciseRecord, UInteger> getIdentity() {
        return (Identity<ExerciseRecord, UInteger>) super.getIdentity();
    }

    @Override
    public UniqueKey<ExerciseRecord> getPrimaryKey() {
        return Keys.KEY_EXERCISE_PRIMARY;
    }

    private transient WorkoutExercisePath _workoutExercise;

    /**
     * Get the implicit to-many join path to the
     * <code>ft.workout_exercise</code> table
     */
    public WorkoutExercisePath workoutExercise() {
        if (_workoutExercise == null)
            _workoutExercise = new WorkoutExercisePath(this, null, Keys.EXERCISE_ID_FK.getInverseKey());

        return _workoutExercise;
    }

    @Override
    public Exercise as(String alias) {
        return new Exercise(DSL.name(alias), this);
    }

    @Override
    public Exercise as(Name alias) {
        return new Exercise(alias, this);
    }

    @Override
    public Exercise as(Table<?> alias) {
        return new Exercise(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Exercise rename(String name) {
        return new Exercise(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Exercise rename(Name name) {
        return new Exercise(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Exercise rename(Table<?> name) {
        return new Exercise(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Exercise where(Condition condition) {
        return new Exercise(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Exercise where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Exercise where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Exercise where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Exercise where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Exercise where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Exercise where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Exercise where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Exercise whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Exercise whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
